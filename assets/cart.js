// CartManager.js - Sepet y√∂netimi i√ßin ayrƒ± sƒ±nƒ±f (G√ºncellenmi≈ü Div Yapƒ±sƒ±)
/* global $ */

class CartManager {
    constructor() {
        console.log('üõí CartManager ba≈ülatƒ±ldƒ±');
        
        this.cart = {
            items: [],
            total: 0,
            itemCount: 0
        };
        
        this.init();
    }
    
    // ‚úÖ BA≈ûLATMA
    init() {
        this.loadCartFromCookie(); // Cookie'den sepeti y√ºkle
        this.initUI();
        this.attachEvents();
        this.updateDisplay();
    }
    
    // ‚úÖ UI BA≈ûLATMA
    initUI() {
        // Sepet badge'ini g√ºncelle
        this.updateBadge();
        
        // Sepet ikonuna tƒ±klama olayƒ± (varsa modal i√ßin)
        $(document).on('click', '#cart-toggle, .cart-icon', () => {
            this.showModal();
        });
    }
    
    // ‚úÖ SEPETE √úR√úN EKLE
    addItem(product) {
        console.log('üõí Sepete ekleniyor:', product);
        
        if (!product || !product.id) {
            console.error('‚ùå Ge√ßersiz √ºr√ºn verisi!');
            this.showMessage('√úr√ºn sepete eklenemedi!', 'error');
            return false;
        }

        // Mevcut √ºr√ºn√º bul
        const existingItemIndex = this.cart.items.findIndex(item => 
            parseInt(item.id) === parseInt(product.id)
        );
        
        if (existingItemIndex !== -1) {
            // Var olan √ºr√ºn√ºn miktarƒ±nƒ± artƒ±r
            this.cart.items[existingItemIndex].quantity += 1;
            console.log('‚ûï Mevcut √ºr√ºn miktarƒ± artƒ±rƒ±ldƒ±');
        } else {
            // Yeni √ºr√ºn ekle
            const cartItem = {
                id: parseInt(product.id),
                name: product.product_name || 'ƒ∞simsiz √úr√ºn',
                price: parseFloat(product.price || product.unit_price || 0),
                quantity: 1,
                image: product.image_url || 'images/popular-img/pic-3.jpg',
                addedAt: new Date().toISOString()
            };
            
            this.cart.items.push(cartItem);
            console.log('‚úÖ Yeni √ºr√ºn sepete eklendi');
        }

        // UI g√ºncelle
        this.updateTotals();
        this.updateDisplay();
        this.updateBadge();
        this.saveCartToCookie(); // Cookie'ye kaydet
        
        // Ba≈üarƒ± mesajƒ±
        this.showMessage(`${product.product_name} sepete eklendi!`, 'success');
        
        return true;
    }
    
    // ‚úÖ MIKTAR ARTIR
    increaseQuantity(productId) {
        const item = this.cart.items.find(item => parseInt(item.id) === parseInt(productId));
        
        if (item) {
            item.quantity += 1;
            this.updateTotals();
            this.updateDisplay();
            this.updateBadge();
            this.saveCartToCookie(); // Cookie'ye kaydet
            this.showMessage(`${item.name} miktarƒ± artƒ±rƒ±ldƒ±`, 'info');
        }
    }
    
    // ‚úÖ MIKTAR AZALT
    decreaseQuantity(productId) {
        const item = this.cart.items.find(item => parseInt(item.id) === parseInt(productId));
        
        if (item) {
            if (item.quantity > 1) {
                item.quantity -= 1;
                this.updateTotals();
                this.updateDisplay();
                this.updateBadge();
                this.saveCartToCookie(); // Cookie'ye kaydet
                this.showMessage(`${item.name} miktarƒ± azaltƒ±ldƒ±`, 'info');
            } else {
                this.removeItem(productId);
            }
        }
    }
    
    // ‚úÖ √úR√úN Sƒ∞L
    removeItem(productId) {
        const itemIndex = this.cart.items.findIndex(item => parseInt(item.id) === parseInt(productId));
        
        if (itemIndex === -1) {
            console.error('‚ùå Silinecek √ºr√ºn bulunamadƒ±');
            return;
        }
        
        const removedItem = this.cart.items[itemIndex];
        
        if (confirm(`"${removedItem.name}" √ºr√ºn√ºn√º sepetten kaldƒ±rmak istediƒüinizden emin misiniz?`)) {
            this.cart.items.splice(itemIndex, 1);
            this.updateTotals();
            this.updateDisplay();
            this.updateBadge();
            this.saveCartToCookie(); // Cookie'ye kaydet
            this.showMessage(`${removedItem.name} sepetten kaldƒ±rƒ±ldƒ±!`, 'success');
        }
    }
    
    // ‚úÖ SEPETI TEMƒ∞ZLE
    clear() {
        if (this.cart.items.length === 0) {
            this.showMessage('Sepet zaten bo≈ü!', 'info');
            return;
        }

        if (confirm('Sepetteki t√ºm √ºr√ºnleri kaldƒ±rmak istediƒüinizden emin misiniz?')) {
            this.cart = { items: [], total: 0, itemCount: 0 };
            this.updateDisplay();
            this.updateBadge();
            this.saveCartToCookie(); // Cookie'ye kaydet
            this.showMessage('üßπ Sepet temizlendi!', 'info');
        }
    }
    
    // ‚úÖ SEPET TOPLAMLARINI HESAPLA
    updateTotals() {
        this.cart.itemCount = this.cart.items.reduce((total, item) => total + item.quantity, 0);
        this.cart.total = this.cart.items.reduce((total, item) => total + (item.price * item.quantity), 0);
    }
    
    // ‚úÖ SEPET BADGE G√úNCELLEMESƒ∞
    updateBadge() {
        const badge = $('.cart-badge');
        if (this.cart.itemCount > 0) {
            badge.text(this.cart.itemCount).show();
        } else {
            badge.hide();
        }
    }
    
    // ‚úÖ SEPET G√ñR√úN√úM√úN√ú G√úNCELLE (Yeni div yapƒ±nƒ±za g√∂re d√ºzenlendi)
    updateDisplay() {
        const $cartContainer = $('#cart-container');
        
        if ($cartContainer.length === 0) {
            console.warn('‚ö†Ô∏è #cart-container bulunamadƒ±');
            return;
        }
        
        // Bo≈ü sepet durumu
        if (this.cart.items.length === 0) {
            $cartContainer.html(`
                <div class="card-body pt-0 pb-2">
                    <div class="text-center py-4">
                        <i class="fas fa-shopping-cart fa-3x text-muted mb-3"></i>
                        <p class="text-muted">Sepetiniz bo≈ü</p>
                        <small class="text-muted">√úr√ºn eklemek i√ßin men√ºden se√ßim yapƒ±n</small>
                    </div>
                </div>
                <div class="card-footer pt-0 border-0">
                    <div class="d-flex align-items-center justify-content-between mb-3">
                        <h4 class="font-w500">Total</h4>
                        <h3 class="font-w500 text-primary">0.00 ‚Ç∫</h3>
                    </div>
                    <button class="btn btn-primary btn-block" id="place-order-btn">Sipari≈ü Ver</button>
                </div>
            `);
            return;
        }
        
        // Card body - √úr√ºnler listesi
        let cardBodyHTML = '<div class="card-body pt-0 pb-2">';
        
        this.cart.items.forEach((item, index) => {
            cardBodyHTML += this.createItemHTML(item);
            // Son √ºr√ºn deƒüilse HR ekle
            if (index < this.cart.items.length - 1) {
                cardBodyHTML += '<hr class="my-2 text-primary" style="opacity:0.9"/>';
            }
        });
        
        cardBodyHTML += '</div>'; // card-body kapanƒ±≈ü
        
        // Card footer - Toplam ve sipari≈ü ver butonu
        const cardFooterHTML = `
            <div class="card-footer pt-0 border-0">
                <div class="d-flex align-items-center justify-content-between mb-3">
                    <h4 class="font-w500">Total</h4>
                    <h3 class="font-w500 text-primary">${this.cart.total.toFixed(2)} ‚Ç∫</h3>
                </div>
                <button class="btn btn-primary btn-block" id="place-order-btn">Sipari≈ü Ver</button>
                <button class="btn btn-outline-danger btn-sm mt-2 w-100" id="clear-cart-btn">
                    <i class="fas fa-trash me-2"></i>Sepeti Temizle
                </button>
            </div>
        `;
        
        // Container'a HTML'i yerle≈ütir
        $cartContainer.html(cardBodyHTML + cardFooterHTML);
    }
    
    // ‚úÖ SEPET √úR√úN HTML OLU≈ûTUR (Yeni div yapƒ±nƒ±za g√∂re d√ºzenlendi)
    createItemHTML(item) {
        let imageSrc = item.image;
        if (!imageSrc.includes('http') && !imageSrc.startsWith('images/')) {
            imageSrc = `images/products/${imageSrc}`;
        }
        
        return `
            <div class="order-check d-flex align-items-center my-3" data-item-id="${item.id}">
                <div class="dlab-media">
                    <img src="${imageSrc}" alt="${item.name}" 
                         onerror="this.src='images/popular-img/review-img/pic-1.jpg'">
                </div>
                <div class="dlab-info">
                    <div class="d-flex align-items-center justify-content-between">
                        <h4 class="dlab-title">
                            <a href="javascript:void(0);">${item.name}</a>
                        </h4>
                        <h4 class="text-primary ms-2">+${(item.price * item.quantity).toFixed(2)} ‚Ç∫</h4>
                    </div>
                    <div class="d-flex align-items-center justify-content-between">
                        <span>x${item.quantity}</span>
                        <div class="quntity">
                            <button data-decrease data-item-id="${item.id}">-</button>
                            <input data-value type="text" value="${item.quantity}" readonly />
                            <button data-increase data-item-id="${item.id}">+</button>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
    
    // ‚úÖ EVENT LISTENER'LARI BAƒûLA (Yeni div yapƒ±sƒ±na g√∂re g√ºncellendi)
    attachEvents() {
        // Miktar azalt butonu
        $(document).on('click', '[data-decrease]', (e) => {
            const itemId = $(e.target).data('item-id');
            if (itemId) {
                this.decreaseQuantity(itemId);
            }
        });
        
        // Miktar artƒ±r butonu
        $(document).on('click', '[data-increase]', (e) => {
            const itemId = $(e.target).data('item-id');
            if (itemId) {
                this.increaseQuantity(itemId);
            }
        });
        
        // Sepeti temizle butonu
        $(document).on('click', '#clear-cart-btn', () => {
            this.clear();
        });
        
        // Sipari≈ü ver butonu
        $(document).on('click', '#place-order-btn', () => {
            this.placeOrder();
        });
        
        // Miktar input'una manual deƒüer giri≈üi (opsiyonel)
        $(document).on('change', '[data-value]', (e) => {
            const $input = $(e.target);
            const $container = $input.closest('.order-check');
            const itemId = $container.data('item-id');
            const newQuantity = parseInt($input.val()) || 1;
            
            if (newQuantity > 0) {
                this.updateItemQuantity(itemId, newQuantity);
            } else {
                $input.val(1);
                this.showMessage('Miktar 1\'den az olamaz!', 'error');
            }
        });
    }
    
    // ‚úÖ √úR√úN Mƒ∞KTARINI DOƒûRUDAN G√úNCELLEMESƒ∞ (Manual input i√ßin)
    updateItemQuantity(productId, newQuantity) {
        const item = this.cart.items.find(item => parseInt(item.id) === parseInt(productId));
        
        if (item) {
            item.quantity = Math.max(1, newQuantity);
            this.updateTotals();
            this.updateDisplay();
            this.updateBadge();
            this.saveCartToCookie(); // Cookie'ye kaydet
        }
    }
    
    // ‚úÖ Sƒ∞PARƒ∞≈û VER
    placeOrder() {
        if (this.cart.items.length === 0) {
            this.showMessage('Sepetiniz bo≈ü! √ñnce √ºr√ºn ekleyin.', 'error');
            return;
        }
        
        const $orderBtn = $('#place-order-btn');
        const originalText = $orderBtn.html();
        
        if (confirm(`Toplam ${this.cart.total.toFixed(2)} ‚Ç∫ tutarƒ±ndaki sipari≈üi onaylƒ±yor musunuz?`)) {
            $orderBtn.html('<i class="fas fa-spinner fa-spin me-2"></i>Sipari≈ü veriliyor...').prop('disabled', true);
            
            // Sipari≈üi cookie'ye kaydet
            const order = {
                id: Date.now(), // Benzersiz sipari≈ü ID'si
                items: [...this.cart.items],
                total: this.cart.total,
                orderDate: new Date().toISOString(),
                status: 'pending'
            };
            
            this.saveOrderToCookie(order);
            
            setTimeout(() => {
                this.showMessage('üéâ Sipari≈üiniz ba≈üarƒ±yla alƒ±ndƒ±!', 'success');
                // Sepeti sessizce temizle (onay sormadan)
                this.cart = { items: [], total: 0, itemCount: 0 };
                this.updateDisplay();
                this.updateBadge();
                this.saveCartToCookie();
                $orderBtn.html(originalText).prop('disabled', false);
            }, 2000);
        }
    }
    
    // ‚úÖ SEPET MODAL G√ñSTER (ƒ∞steƒüe baƒülƒ±)
    showModal() {
        // Modal kodlarƒ± buraya
        console.log('Sepet modal a√ßƒ±lacak...');
    }
    
    // ‚úÖ MESAJ G√ñSTER
    showMessage(message, type = 'success') {
        const alertClass = {
            success: 'alert-success',
            error: 'alert-danger', 
            info: 'alert-info'
        }[type] || 'alert-success';

        const $message = $(`
            <div class="alert ${alertClass} position-fixed" style="top: 20px; right: 20px; z-index: 9999; min-width: 300px;">
                ${message}
                <button type="button" class="btn-close ms-2" onclick="$(this).parent().fadeOut()"></button>
            </div>
        `);
        
        $('body').append($message);
        setTimeout(() => $message.fadeOut(() => $message.remove()), 3000);
    }
    
    // ‚úÖ COOKIE FONKSƒ∞YONLARI
    
    // Sepeti cookie'ye kaydet
    saveCartToCookie() {
        try {
            const cartData = JSON.stringify(this.cart);
            const expiryDate = new Date();
            expiryDate.setDate(expiryDate.getDate() + 7);
            
            document.cookie = `cart=${encodeURIComponent(cartData)}; expires=${expiryDate.toUTCString()}; path=/; SameSite=Lax`;
            console.log('‚úÖ Sepet cookie\'ye kaydedildi');
        } catch (error) {
            console.error('‚ùå Sepet cookie\'ye kaydedilirken hata:', error);
        }
    }
    
    // Cookie'den sepeti y√ºkle
    loadCartFromCookie() {
        try {
            const cookies = document.cookie.split(';');
            const cartCookie = cookies.find(cookie => cookie.trim().startsWith('cart='));
            
            if (cartCookie) {
                const cartData = decodeURIComponent(cartCookie.split('=')[1]);
                const savedCart = JSON.parse(cartData);
                
                // Veri doƒürulama
                if (savedCart && savedCart.items && Array.isArray(savedCart.items)) {
                    // Eski veriyi temizle (7 g√ºnden eski)
                    const sevenDaysAgo = new Date();
                    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
                    
                    savedCart.items = savedCart.items.filter(item => {
                        if (!item.addedAt) return true; // Eski veriler i√ßin
                        return new Date(item.addedAt) > sevenDaysAgo;
                    });
                    
                    this.cart = savedCart;
                    this.updateTotals(); // Toplamlarƒ± yeniden hesapla
                    console.log('‚úÖ Sepet cookie\'den y√ºklendi:', this.cart);
                } else {
                    throw new Error('Ge√ßersiz sepet verisi');
                }
            }
        } catch (error) {
            console.error('‚ùå Cookie\'den sepet y√ºklenirken hata:', error);
            this.cart = { items: [], total: 0, itemCount: 0 };
            // Bozuk cookie'yi temizle
            this.clearCartCookie();
        }
    }
    
    // Bozuk sepet cookie'sini temizle
    clearCartCookie() {
        document.cookie = 'cart=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/';
        console.log('üßπ Bozuk sepet cookie\'si temizlendi');
    }
    
    // Sipari≈üi cookie'ye kaydet
    saveOrderToCookie(order) {
        try {
            // Mevcut sipari≈üleri al
            let orders = this.getOrdersFromCookie();
            orders.push(order);
            
            // Son 10 sipari≈üi tut
            if (orders.length > 10) {
                orders = orders.slice(-10);
            }
            
            const ordersData = JSON.stringify(orders);
            const expiryDate = new Date();
            expiryDate.setDate(expiryDate.getDate() + 30); // 30 g√ºn ge√ßerli
            
            document.cookie = `orders=${encodeURIComponent(ordersData)}; expires=${expiryDate.toUTCString()}; path=/; SameSite=Lax`;
            console.log('‚úÖ Sipari≈ü cookie\'ye kaydedildi:', order);
        } catch (error) {
            console.error('‚ùå Sipari≈ü cookie\'ye kaydedilirken hata:', error);
        }
    }
    
    // Cookie'den sipari≈üleri al
    getOrdersFromCookie() {
        try {
            const cookies = document.cookie.split(';');
            const ordersCookie = cookies.find(cookie => cookie.trim().startsWith('orders='));
            
            if (ordersCookie) {
                const ordersData = decodeURIComponent(ordersCookie.split('=')[1]);
                const orders = JSON.parse(ordersData);
                
                // Veri doƒürulama
                if (Array.isArray(orders)) {
                    return orders;
                }
            }
            
            return [];
        } catch (error) {
            console.error('‚ùå Cookie\'den sipari≈üler y√ºklenirken hata:', error);
            return [];
        }
    }
    
    // T√ºm sipari≈üleri getir (debug/g√∂r√ºnt√ºleme i√ßin)
    getAllOrders() {
        return this.getOrdersFromCookie();
    }
    
    // Cookie boyut kontrol√º
    checkCookieSize() {
        const allCookies = document.cookie;
        const sizeInKB = new Blob([allCookies]).size / 1024;
        
        if (sizeInKB > 3) { // 3KB √ºzeri uyarƒ±
            console.warn(`‚ö†Ô∏è Cookie boyutu b√ºy√ºk: ${sizeInKB.toFixed(2)}KB`);
        }
        
        return sizeInKB;
    }
    getCart() {
        return this.cart;
    }
    
    // ‚úÖ SEPET DURUMU
    isEmpty() {
        return this.cart.items.length === 0;
    }
    
    // ‚úÖ TOPLAM √úR√úN SAYISI
    getTotalItems() {
        return this.cart.itemCount;
    }
    
    // ‚úÖ TOPLAM TUTAR
    getTotalAmount() {
        return this.cart.total;
    }
}

// Global CartManager instance
let cartManager;

$(document).ready(() => {
    cartManager = new CartManager();
    window.cartManager = cartManager; // Debug i√ßin
    console.log('‚úÖ CartManager hazƒ±r');
});